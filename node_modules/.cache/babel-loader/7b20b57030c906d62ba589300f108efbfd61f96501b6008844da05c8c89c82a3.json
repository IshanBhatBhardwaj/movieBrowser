{"ast":null,"code":"var _jsxFileName = \"/Users/ishanbhardwaj/Desktop/moviebrowser/src/components/MovieView.js\",\n  _s = $RefreshSig$();\nimport Hero from './hero';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MovieView = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [movieDetails, setMovieDetails] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=45e3e92747353d02484018a30548fa3d&language=en-US`).then(response => response.json()).then(data => {\n      setMovieDetails(data);\n      setIsLoading(false);\n    });\n  }, [id]);\n  const renderDetails = () => {\n    if (isLoading) {\n      return /*#__PURE__*/_jsxDEV(Hero, {\n        text: \"...Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 20\n      }, this);\n    } else {\n      const posterPath = `https://image.tmdb.org/t/p/w500${movieDetails.poster_path}`;\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Hero, {\n          text: movieDetails.original_title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container my-5\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-3\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: posterPath,\n                alt: \"...No Photo Found\",\n                className: \"img-fluid shadow rounded\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-9\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: movieDetails.original_title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"lead\",\n                children: movieDetails.over_view\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true);\n    }\n  };\n  return renderDetails();\n};\n_s(MovieView, \"A91t99b1ih8UPOZcte1GbTH3aPo=\", false, function () {\n  return [useParams];\n});\n_c = MovieView;\nexport default MovieView;\nvar _c;\n$RefreshReg$(_c, \"MovieView\");","map":{"version":3,"names":["Hero","useParams","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","MovieView","_s","id","movieDetails","setMovieDetails","isLoading","setIsLoading","fetch","then","response","json","data","renderDetails","text","fileName","_jsxFileName","lineNumber","columnNumber","posterPath","poster_path","children","original_title","className","src","alt","over_view","_c","$RefreshReg$"],"sources":["/Users/ishanbhardwaj/Desktop/moviebrowser/src/components/MovieView.js"],"sourcesContent":["import Hero from './hero'\nimport { useParams } from 'react-router-dom'\nimport { useState, useEffect } from 'react'\n\n\nconst MovieView = () => {\n\n    const {id} = useParams() \n\n    const [ movieDetails, setMovieDetails] = useState({})\n    const [ isLoading, setIsLoading] = useState(true)\n\n    useEffect( () => {\n        fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=45e3e92747353d02484018a30548fa3d&language=en-US`)\n            .then(response => response.json())\n            .then(data => {\n                setMovieDetails(data)\n                setIsLoading(false)\n            })\n    }, [id])\n\n    const renderDetails = () => {\n        if (isLoading) {\n            return <Hero text=\"...Loading\"/>\n        } \n        else {\n\n            const posterPath = `https://image.tmdb.org/t/p/w500${movieDetails.poster_path}`\n            return (\n                \n                <>\n                    <Hero text={movieDetails.original_title}/>\n                    <div className=\"container my-5\">\n                        <div className=\"row\"> \n                            <div className=\"col-md-3\">\n                                <img src={posterPath} alt=\"...No Photo Found\" className=\"img-fluid shadow rounded\"/>\n                            </div>\n                            <div className=\"col-md-9\">\n                                <h2>{movieDetails.original_title}</h2>\n                                <p className=\"lead\">\n                                    {movieDetails.over_view}\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n\n                </>\n\n            )\n        }\n    }\n     \n    return(\n        renderDetails()\n    ) \n}\n\n\nexport default MovieView"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,QAAQ;AACzB,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAG3C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEpB,MAAM;IAACC;EAAE,CAAC,GAAGT,SAAS,CAAC,CAAC;EAExB,MAAM,CAAEU,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;EACrD,MAAM,CAAEW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAEjDC,SAAS,CAAE,MAAM;IACbY,KAAK,CAAE,sCAAqCL,EAAG,0DAAyD,CAAC,CACpGM,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACVP,eAAe,CAACO,IAAI,CAAC;MACrBL,YAAY,CAAC,KAAK,CAAC;IACvB,CAAC,CAAC;EACV,CAAC,EAAE,CAACJ,EAAE,CAAC,CAAC;EAER,MAAMU,aAAa,GAAGA,CAAA,KAAM;IACxB,IAAIP,SAAS,EAAE;MACX,oBAAOR,OAAA,CAACL,IAAI;QAACqB,IAAI,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IACpC,CAAC,MACI;MAED,MAAMC,UAAU,GAAI,kCAAiCf,YAAY,CAACgB,WAAY,EAAC;MAC/E,oBAEItB,OAAA,CAAAE,SAAA;QAAAqB,QAAA,gBACIvB,OAAA,CAACL,IAAI;UAACqB,IAAI,EAAEV,YAAY,CAACkB;QAAe;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eAC1CpB,OAAA;UAAKyB,SAAS,EAAC,gBAAgB;UAAAF,QAAA,eAC3BvB,OAAA;YAAKyB,SAAS,EAAC,KAAK;YAAAF,QAAA,gBAChBvB,OAAA;cAAKyB,SAAS,EAAC,UAAU;cAAAF,QAAA,eACrBvB,OAAA;gBAAK0B,GAAG,EAAEL,UAAW;gBAACM,GAAG,EAAC,mBAAmB;gBAACF,SAAS,EAAC;cAA0B;gBAAAR,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAC;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnF,CAAC,eACNpB,OAAA;cAAKyB,SAAS,EAAC,UAAU;cAAAF,QAAA,gBACrBvB,OAAA;gBAAAuB,QAAA,EAAKjB,YAAY,CAACkB;cAAc;gBAAAP,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACtCpB,OAAA;gBAAGyB,SAAS,EAAC,MAAM;gBAAAF,QAAA,EACdjB,YAAY,CAACsB;cAAS;gBAAAX,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACxB,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC;MAAA,eAER,CAAC;IAGX;EACJ,CAAC;EAED,OACIL,aAAa,CAAC,CAAC;AAEvB,CAAC;AAAAX,EAAA,CAlDKD,SAAS;EAAA,QAEEP,SAAS;AAAA;AAAAiC,EAAA,GAFpB1B,SAAS;AAqDf,eAAeA,SAAS;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}